@using System.Collections.Specialized
@using Newtonsoft.Json
@model Destiny.ScrimTracker.Logic.Models.GuardianHistory

@{
  var eloHistory = Model.EloHistory.Select(elo => elo.NewElo).ToArray();
  var eloHistoryString = JsonConvert.SerializeObject(eloHistory);
  var eloHistoryRange = Model.EloHistory.Select(elo => elo.TimeStamp.ToString("M/d/yy")).ToArray();
  var eloHistoryRangeString = JsonConvert.SerializeObject(eloHistoryRange);
  var efficiencyHistory = Model.EfficiencyHistory.Select(eff => eff.NewEfficiency).ToArray();
  var efficiencyHistoryString = JsonConvert.SerializeObject(efficiencyHistory);
  var maxEff = efficiencyHistory.Max() + 1;
}
<!DOCTYPE html>

<html>
<body>
<div>
  <h3>@Model.Guardian.GamerTag</h3>
  <h5>Total Match Count: @Model.MatchCount</h5>
  <div class="container">
    <canvas id="lineChart"></canvas>
  </div>
</div>
</body>
</html>
@section Scripts
{
  <script>
var ctxL = document.getElementById("lineChart").getContext('2d');
var myLineChart = new Chart(ctxL, {
      type: 'line',
      data: {
        labels: JSON.parse('@Html.Raw(eloHistoryRangeString)'),
        datasets: [{
          label: 'ELO',
          yAxisID: 'A',
          data: @(eloHistoryString),
          backgroundColor: "rgba(52, 207, 235, 0.5)"
        }, {
          label: 'Efficiency',
          yAxisID: 'B',
          data: @(efficiencyHistoryString),
          backgroundColor: "rgba(246, 33, 33, 0.5)"
        }]
      },
      options: {
        scales: {
          yAxes: [{
            id: 'A',
            type: 'linear',
            position: 'left',
          }, {
            id: 'B',
            type: 'linear',
            position: 'right',
            ticks: {
              max: @(maxEff),
              min: 0
            }
          }]
        }
      }
    });
</script>
}